要素・行・列の取り出し
==============================================

実験データの解析などで特定の範囲を切り出して処理したり，データを間引いて使いたい場合があるかと思います．
NumPyでは，インデキシング(indexing)という処理により，配列の任意の要素・行・列を切り出すことができます．
ただし，切り出し方によりコピーを生成するかビュー（参照）を生成するかという違いがありますので，注意が必要です．

2章で紹介したように，Pythonのリストやタプルにも実装されているスライシングをndarrayに対して行うと，その部分配列がビュー（参照）として返ってきます．
つまり，その部分配列はデータの一部のコピーではなく，部分配列に対する変更はオリジナルのndarrayを変更するということです．
２次元配列に対する例を見てみます．

.. ipython:: python
    
    arr2d = np.arange(9).reshape(3,3)
    arr2d

第１行の第１要素以降を取り出してみます．

.. ipython:: python

    arr_slice = arr2d[1, 1:]
    arr_slice

arr_sliceの中身を変更します．

.. ipython:: python

    arr_slice[:] = 100

    arr2d

この例では，arr_sliceはビューですので，arr2dに変更が反映されています．
他の配列指向の言語ではスライスのようなデータ片はコピーとして生成する仕様のものが多いため，このインデキシングの仕様に驚く方は多いと思います．
NumPyの目的の一つは大量データ処理ですが，ビューを生成することで元のndarrayのコピーがメモリ上に作成されないため，大きなデータを保持するndarrayのビューを生成してもメモリの使用量はそのビューを保持する分しか増えないというメリットがあります [#]_ ．

NumPyの特徴の一つが，多次元配列の処理でしたが，ここでは２次元以上のインデキシングについてもう少し紹介します．

多次元配列のインデキシングにおいて，後方のインデックスを省略することができます．
このとき返るのは次元数を落としたndarrayで，もとの多次元配列の一部分です．
動作を確かめる為に，2×3×4のndarrayを例に見てみます．

.. ipython:: python

    arr3d = np.arange(24).reshape(2, 3, 4)
    arr3d

したがって，arr3d[1]は3×4の2次元配列になります．

.. ipython:: python

    arr3d[1]

同じ要領で，arr3d[0, 1]とすると，1次元配列を取り出すことができます．

.. ipython:: python
    
    arr3d[0, 1]

2章で紹介したスライシングは，ndarrayに対しても使うことができます．
ここでは，先程の2次元配列arr2dを例にスライシングの動作を確認してみましょう．

.. ipython:: python

    arr2d
    arr2d[:3, 1:]

この例のように，範囲指定でスライスをしていく場合は，得られるのは元の配列と同次元のビューになります．

一方で，スライスだけでなくスカラーでインデックスを指定した場合，元配列よりも次元数が下がったスライスが得られます．

.. ipython:: python

    arr2d[0, :2]

.. [#] スライスをndarrayの実コピーとして生成する場合には，明示的に ``arr2d[1, 1:].copy()`` のようにします．

.. ファンシーインデキシング
.. 
.. 特定の要素を取り出す処理をインデキシング(indexing)と呼びますが，．
.. 
.. NumPyでは，以下のように特定の範囲を切り取ることができます．
.. スライシング
.. 配列において特定の範囲の要素を切り出す際に利用する機能をスライシングと呼びます．
.. 配列の各々の次元において ``[start:stop:step]`` を指定します．
.. 
.. * start: 始点
.. * stop: 終点
.. * step: 何要素ごとに切り出すか
.. 
.. 例えば，ある次元においてn番目からm番目の要素まで２個おきに切り出したいときは， ``[n: m+1, 2]`` とすれば目的の要素を切り出す事ができます．
.. 
.. 例
.. Pythonでは最初の要素は０番目になることと，stopに指定されたインデックスは切り出されない（範囲外）になることに注意して下さい．また，逆順にする
.. 
.. * :stop:step 
.. * start::step
.. * start:stop
.. 
.. とすることでそれぞれstart, stop, stepを省略することができます．なお，全範囲を選択したい場合は ``[:]`` で十分です．stepに負の値を与えることで，逆順に何要素ごとに切り出すか指定することができます．
.. 
.. 例
.. 多次元の場合も，各次元ごとにこのスライスを組み合わせます．例えば三次元の場合は ``[start:stop:step, start:stop:step, start:stop:step]`` というように，各次元毎のスライスを”,”で区切って指定します．
.. 

