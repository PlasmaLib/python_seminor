はじめに
===============================
本章までに，Pythonで簡単な解析やプログラムの構築は出来るようになりました．
次にみなさんが行いたいのは，実験データの解析やシミュレーションでしょう．
そこで，Pythonにおける科学技術計算の基礎ライブラリであるNumPyの使い方を，簡単な例を踏まえて紹介します．
更に，高度な数学的アルゴリズムを提供するSciPyに関する簡単な紹介とともに，シミュレーションの例としてPredator-Preyモデルの簡単な解析例を示します．
本章で興味を持たれた方は，NumPy/SciPyに関する情報は公式HP [NP]_ [SP]_ や，近年充実してきている日本語 [WM]_ [KN]_ 書籍を参考にして，より理解を深めていただければと思います．


------------------------------------
NumPy/SciPyとは
------------------------------------

NumPy
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

NumPyは”Numerical Python”の略語で，科学技術計算やデータ分析のための基本的なパッケージです．
CやFortran等の低級言語と比較して性能が犠牲となっていたPythonに対して，NumPyは多次元配列をC言語で実装することで，使い勝手の良いインターフェイスを提供しています．
大規模データを高速に処理できる理由は，多次元配列オブジェクトであるndarrayを基本的なデータ保持形式として使用しているためです．
ndarrayは保持する「データ」と次元数，データ型などからなる「メタデータ」と呼ばれる付随情報からなり，これらがシステムのメモリ(RAM)に隙間なく配置されています．
データがメモリの１つのまとまった領域に配置されていることで，以下のような利点があります．

+ 配列演算をC言語のような低級言語で高速に実装できる
+ データをCPUレジスタにまとめて効率的に読み出せるため高速である
+ CPUのベクトル化演算の恩恵を受けられる

SciPy
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

NumPyを利用する科学計算用パッケージの中で，SciPyは重要で，高速フーリエ変換，最適化，数値積分，信号処理などの科学技術計算に関する機能を提供するパッケージです．
SciPyはFortranのプログラムで実装された多くのハイレベルな関数群を提供することで，Pythonのスクリプト言語としての機能を大幅に強化しています．
このおかげで，Pythonが科学技術計算においてMATLAB, IDL, Octave，およびScilabに匹敵するシステムになっています．

SciPyは，以下の表に示すような多くのサブパッケージ群から構成されています．

+-------------+----------------------------------------------+
| cluster     | ベクトル量子化／K平均法                      |
+-------------+----------------------------------------------+
| constants   | 物理／数学定数                               |
+-------------+----------------------------------------------+
| fftpack     | FFTの関数                                    |
+-------------+----------------------------------------------+
| integrate   | 積分と常微分方程式ソルバー                   |
+-------------+----------------------------------------------+
| interpolate | 内挿とスムージングスプライン                 |
+-------------+----------------------------------------------+
| io          | データ入出力                                 |
+-------------+----------------------------------------------+
| linalg      | 線形代数ルーチン                             |
+-------------+----------------------------------------------+
| ndimage     | N次元画像パッケージ                          |
+-------------+----------------------------------------------+
| odr         | 直交距離回帰(Orthogonal Distance Regression) |
+-------------+----------------------------------------------+
| optimize    | 最適化及び解探索ルーチン                     |
+-------------+----------------------------------------------+
| signal      | 信号処理                                     |
+-------------+----------------------------------------------+
| sparse      | 疎行列と関連する関数                         |
+-------------+----------------------------------------------+
| spatial     | 空間データ構造とアルゴリズム                 |
+-------------+----------------------------------------------+
| special     | 任意の数学特殊関数                           |
+-------------+----------------------------------------------+
| stats       | 統計分布，統計関数                           |
+-------------+----------------------------------------------+
| weave       | C/C++統合                                    |
+-------------+----------------------------------------------+

これらの機能を全て紹介することはできませんが，SciPyの公式ドキュメント [SP]_ を閲覧するか，Pythonのインタラクティブシェルでヘルプを表示させることで詳細を調べることができます [#]_ ．

NumPyとSciPyの関係
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

SciPyのDocstringの冒頭には，「SciPyはNumPyの名前空間から全ての関数をimportし，加えて以下のサブパッケージを提供する」ということが書かれています．
つまり，SciPyをimportすると，基本的に全てのNumPy関数を使えるようになります．
ただし，SciPyの関数はNumPyの同一関数よりも最適化されていたり，機能が拡張されている場合が多いため，両者に関数が存在する場合には， SciPyにしか存在しない関数を用いるほうが，計算速度の面で有利なことが多いです．

.. [NP] http://www.numpy.org
.. [SP] https://www.scipy.org
.. [WM] Wes McKinney: 「Pythonによるデータ分析入門」（オライリー・ジャパン，2013）
.. [KN] 中久喜健司:　「科学技術計算のためのPython入門」（技術評論社，2016）

.. [#] たとえばscipy.linalgのヘルプを表示させたい場合は，IPythonなどで ``scipy.linalg?`` と入力すればヘルプを参照することができます．
