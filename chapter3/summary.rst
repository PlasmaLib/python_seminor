まとめ
===========================================
本章では，NumPy/SciPyの特徴と基本的な使用法，簡単なシュミレーションの例を紹介しました．
NumPyが他の多くのライブラリの基礎となっているため，
NumPyの基本を理解することがPythonを用いた科学技術計算にとって重要です．
本章で紹介したNumPyにおけるndarrayやユニバーサル関数，ブロードキャスティングの概念はPythonの機能を大幅に拡張しており，これらの概念に慣れることがプログラミングの効率を大幅に向上させます．
さらに，SciPyを用いることでNumPyの機能の上に構築された様々な科学技術計算アルゴリズムを利用できます．
SciPyは非常に巨大なパッケージですので，効率良く計算を進めるため，処理を実装する前にSciPyで既に実装されていないかどうかぜひ確認してみて下さい．

.. 優れたライブラリを使用せずに，自分で１から処理を書くことは，バグが多く最適がなく，共有が難しくメンテナンスしづらいコードに陥りがちです．

科学技術計算において，特に解析対象や解析方法がその都度変化するプラズマ実験では，
実験条件に対応して柔軟にコードを組まなければなりません．
例えば，数分間の実験周期中に直前のプラズマ放電で得られたデータを解析し，
それを基に次の放電の条件を決めるといった場合，
非常に短時間にコードを組んで解析を進めることが要求されます．
こういった状況では，実行速度よりも開発速度が重要になることが多く，Pythonはその用途に適しています．

本講座でPythonの使い方を一通り覚えたら，まずは自身の研究でも試してみて下さい．
すぐにPythonの柔軟性や開発のスピード感を味わってもらえると思います．
